name: Update Profile Stats

on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC (fixed cron syntax)
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]
    paths: [ 'scripts/update_stats.py' ]  # Trigger on script changes

# Grant permissions to write to repository
permissions:
  contents: write
  actions: read
  pull-requests: write

jobs:
  update-stats:
    runs-on: ubuntu-latest
    name: Update Coding Platform Stats
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Create requirements.txt if not exists
      run: |
        if [ ! -f requirements.txt ]; then
          echo "Creating requirements.txt..."
          cat > requirements.txt << EOF
        requests>=2.31.0
        beautifulsoup4>=4.12.0
        lxml>=4.9.0
        EOF
        fi
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create data directory
      run: mkdir -p data
        
    - name: Update coding platform stats
      run: |
        echo "🚀 Starting stats update process..."
        python scripts/update_stats.py
      continue-on-error: true
      
    - name: Verify data files
      run: |
        echo "📁 Checking generated data files:"
        ls -la data/ || echo "No data directory found"
        
    - name: Check for changes
      id: verify-changed-files
      run: |
        echo "🔍 Checking for changes..."
        git diff --name-only
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "✅ Changes detected"
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "ℹ️ No changes detected"
        fi
        
    - name: Display current stats
      if: always()
      run: |
        echo "📊 Current Stats Summary:"
        echo "=========================="
        for file in data/*.json; do
          if [ -f "$file" ]; then
            echo "📄 $(basename "$file"):"
            cat "$file" | python -m json.tool || echo "Invalid JSON in $file"
            echo ""
          fi
        done
        
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "sbbalaganesh2004@gmail.com"
        git config --local user.name "Balaganesh.S.B"
        git add -A
        
        # Create detailed commit message
        COMMIT_MSG="📊 Auto-update coding stats - $(date +'%Y-%m-%d %H:%M:%S UTC')

        Updated platforms:
        - 🔥 LeetCode: $([ -f data/leetcode_stats.json ] && echo "✅" || echo "❌")
        - 🚀 GeeksforGeeks: $([ -f data/geeksforgeeks_stats.json ] && echo "✅" || echo "❌")  
        - ⭐ HackerRank: $([ -f data/hackerrank_stats.json ] && echo "✅" || echo "❌")
        - 🎯 TakeUForward: $([ -f data/tuf_stats.json ] && echo "✅" || echo "❌")
        
        🤖 Automated update via GitHub Actions"
        
        git commit -m "$COMMIT_MSG"
        git push origin main
        
    - name: Create summary
      if: always()
      run: |
        echo "## 📊 Stats Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Status | Last Updated |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------|--------------|" >> $GITHUB_STEP_SUMMARY
        
        # Check each platform
        if [ -f data/leetcode_stats.json ]; then
          LEETCODE_COUNT=$(cat data/leetcode_stats.json | python -c "import sys, json; data=json.load(sys.stdin); print(data.get('solved_problems', {}).get('total', 0))" 2>/dev/null || echo "0")
          echo "| 🔥 LeetCode | ✅ Success | $LEETCODE_COUNT problems |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🔥 LeetCode | ❌ Failed | - |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f data/geeksforgeeks_stats.json ]; then
          GFG_COUNT=$(cat data/geeksforgeeks_stats.json | python -c "import sys, json; data=json.load(sys.stdin); print(data.get('problems_solved', 0))" 2>/dev/null || echo "0")
          echo "| 🚀 GeeksforGeeks | ✅ Success | $GFG_COUNT problems |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🚀 GeeksforGeeks | ❌ Failed | - |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f data/hackerrank_stats.json ]; then
          HR_COUNT=$(cat data/hackerrank_stats.json | python -c "import sys, json; data=json.load(sys.stdin); print(data.get('badges', 0))" 2>/dev/null || echo "0")
          echo "| ⭐ HackerRank | ✅ Success | $HR_COUNT badges |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| ⭐ HackerRank | ❌ Failed | - |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f data/tuf_stats.json ]; then
          TUF_COUNT=$(cat data/tuf_stats.json | python -c "import sys, json; data=json.load(sys.stdin); print(data.get('problems_solved', 0))" 2>/dev/null || echo "0")
          echo "| 🎯 TakeUForward | ✅ Success | $TUF_COUNT problems |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🎯 TakeUForward | ❌ Failed | - |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📅 **Update Time:** $(date +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "🔄 **Changes:** $(if [ '${{ steps.verify-changed-files.outputs.changed }}' = 'true' ]; then echo 'Yes'; else echo 'No'; fi)" >> $GITHUB_STEP_SUMMARY
